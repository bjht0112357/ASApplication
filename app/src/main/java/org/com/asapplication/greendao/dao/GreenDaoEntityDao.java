package org.com.asapplication.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import org.com.asapplication.greendao.GreenDaoEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GREEN_DAO_ENTITY".
*/
public class GreenDaoEntityDao extends AbstractDao<GreenDaoEntity, Void> {

    public static final String TABLENAME = "GREEN_DAO_ENTITY";

    /**
     * Properties of entity GreenDaoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Date = new Property(0, String.class, "date", false, "DATE");
        public final static Property Step = new Property(1, int.class, "step", false, "STEP");
        public final static Property SportId = new Property(2, Long.class, "sportId", false, "SPORT_ID");
        public final static Property Detail = new Property(3, String.class, "detail", false, "detail");
    }


    public GreenDaoEntityDao(DaoConfig config) {
        super(config);
    }
    
    public GreenDaoEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GREEN_DAO_ENTITY\" (" + //
                "\"DATE\" TEXT," + // 0: date
                "\"STEP\" INTEGER NOT NULL ," + // 1: step
                "\"SPORT_ID\" INTEGER," + // 2: sportId
                "\"detail\" TEXT);"); // 3: detail
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GREEN_DAO_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GreenDaoEntity entity) {
        stmt.clearBindings();
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(1, date);
        }
        stmt.bindLong(2, entity.getStep());
 
        Long sportId = entity.getSportId();
        if (sportId != null) {
            stmt.bindLong(3, sportId);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(4, detail);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GreenDaoEntity entity) {
        stmt.clearBindings();
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(1, date);
        }
        stmt.bindLong(2, entity.getStep());
 
        Long sportId = entity.getSportId();
        if (sportId != null) {
            stmt.bindLong(3, sportId);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(4, detail);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public GreenDaoEntity readEntity(Cursor cursor, int offset) {
        GreenDaoEntity entity = new GreenDaoEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // date
            cursor.getInt(offset + 1), // step
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // sportId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // detail
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GreenDaoEntity entity, int offset) {
        entity.setDate(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setStep(cursor.getInt(offset + 1));
        entity.setSportId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setDetail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(GreenDaoEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(GreenDaoEntity entity) {
        return null;
    }

    @Override
    public boolean hasKey(GreenDaoEntity entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
